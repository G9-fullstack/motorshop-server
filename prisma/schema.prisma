generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id         Int      @id @default(autoincrement())
  imageUrl   String
  announce   Announce @relation(fields: [announceId], references: [id], onDelete: Cascade)
  announceId Int

  @@map("images")
}

model Announce {
  id          Int      @id @default(autoincrement())
  isActive    Boolean  @default(true)
  brand       String
  model       String   @db.VarChar(127)
  year        String   @db.VarChar(4)
  mileage     String   @db.VarChar(10)
  fuel        String
  color       String   @db.VarChar(25)
  price       Float
  description String   @db.Text
  coverImage  String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  seller   User @relation(fields: [sellerId], references: [id])
  sellerId Int

  images Image[]

  comments Comment[]

  @@map("announces")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(127)
  email       String   @unique @db.VarChar(127)
  password    String
  cpf         String   @unique @db.VarChar(11)
  phoneNumber String   @unique @db.VarChar(11)
  birthdate   String   @db.VarChar(10)
  description String   @db.Text
  tokenReset  String?
  isSeller    Boolean  @default(false)
  createdAt   DateTime @default(now())

  address   Address @relation(fields: [addressId], references: [id])
  addressId Int     @unique

  announces Announce[]

  comments Comment[]

  @@map("users")
}

model Address {
  id         Int     @id @default(autoincrement())
  zipCode    String  @db.VarChar(8)
  state      String  @db.VarChar(2)
  city       String  @db.VarChar(127)
  street     String  @db.VarChar(127)
  number     String  @db.VarChar(10)
  complement String? @db.VarChar(127)

  user User?

  @@map("addresses")
}

model Comment {
	id Int @id @default(autoincrement())
	comment String @db.Text
	createdAt DateTime @default(now())

	user User @relation(fields: [userId], references: [id])
	userId Int

	announce Announce @relation(fields: [announceId], references: [id], onDelete: Cascade)
	announceId Int
	
	@@map("comments")
}
